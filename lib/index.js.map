{"version":3,"sources":["../src/index.js"],"names":["Initializer","require","ReadyQueueConsumer","amqpHandlerWrapper","module","exports","options","channel","Error","consumerQueue","handler","failureQueue","initializer","consumer","wrapper","delay","retryCount","initialize","then","start"],"mappings":"aAAA,GAAMA,aAAcC,QAAQ,eAAR,CAApB,CACA,GAAMC,oBAAqBD,QAAQ,wBAAR,CAA3B,CACA,GAAME,oBAAqBF,QAAQ,wBAAR,CAA3B,CAEAG,OAAOC,OAAP,CAAiB,SAACC,OAAD,CAAa,CAC5B;AACA,GAAI,CAACA,QAAQC,OAAb,CAAsB,CACpB,KAAM,IAAIC,MAAJ,CAAU,gDAAV,CACP,CACD,GAAI,CAACF,QAAQG,aAAb,CAA4B,CAC1B,KAAM,IAAID,MAAJ,CAAU,sDAAV,CACP,CACD,GAAI,CAACF,QAAQI,OAAb,CAAsB,CACpB,KAAM,IAAIF,MAAJ,CAAU,gDAAV,CACP,CAED;AACA,GAAI,CAACF,QAAQK,YAAb,CAA2B,CACzBL,QAAQK,YAAR,CAAuBL,QAAQG,aAAR,CAAwB,UAChD,CAED;AACA,GAAMG,aAAc,GAAIZ,YAAJ,CAAgBM,QAAQC,OAAxB,CAAiCD,QAAQG,aAAzC,CAAwDH,QAAQK,YAAhE,CAApB,CACA,GAAME,UAAW,GAAIX,mBAAJ,CAAuBI,QAAQC,OAA/B,CAAjB,CACA,GAAMO,SAAUX,mBAAmBG,QAAQC,OAA3B,CAAoCD,QAAQG,aAA5C,CAA2DH,QAAQK,YAAnE,CAAiFL,QAAQI,OAAzF,CAAkGJ,QAAQS,KAA1G,CAAiHT,QAAQU,UAAzH,CAAqIJ,WAArI,CAAhB,CAEA;AACAA,YACGK,UADH,GAEGC,IAFH,CAEQ,iBAAML,UAASM,KAAT,EAAN,CAFR,EAIA;AACA,MAAOL,QACR,CA7BD","file":"index.js","sourcesContent":["const Initializer = require('./initializer')\nconst ReadyQueueConsumer = require('./ready_queue_consumer')\nconst amqpHandlerWrapper = require('./amqp_handler_wrapper')\n\nmodule.exports = (options) => {\n  // validate options\n  if (!options.channel) {\n    throw new Error('\\'channel\\' not specified.  See documentation.')\n  }\n  if (!options.consumerQueue) {\n    throw new Error('\\'consumerQueue\\' not specified.  See documentation.')\n  }\n  if (!options.handler) {\n    throw new Error('\\'handler\\' not specified.  See documentation.')\n  }\n\n  // set defaults\n  if (!options.failureQueue) {\n    options.failureQueue = options.consumerQueue + '.failure'\n  }\n\n  // initializing the objects\n  const initializer = new Initializer(options.channel, options.consumerQueue, options.failureQueue)\n  const consumer = new ReadyQueueConsumer(options.channel)\n  const wrapper = amqpHandlerWrapper(options.channel, options.consumerQueue, options.failureQueue, options.handler, options.delay, options.retryCount, initializer)\n\n  // initializing the queues, exchange and binding. Then starting the consumer\n  initializer\n    .initialize()\n    .then(() => consumer.start())\n\n  // returning wrapper for given amqp handler function.\n  return wrapper\n}\n"]}