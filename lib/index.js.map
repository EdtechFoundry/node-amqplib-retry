{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA,KAAM,aAAc,QAAQ,eAAR,CAApB,CACA,KAAM,oBAAqB,QAAQ,wBAAR,CAA3B,CACA,KAAM,oBAAqB,QAAQ,wBAAR,CAA3B,CAEA,OAAO,OAAP,CAAkB,OAAD,EAAa,CAC5B;AACA,GAAI,CAAC,QAAQ,OAAb,CAAsB,CACpB,KAAM,IAAI,MAAJ,CAAU,gDAAV,CACP,CACD,GAAI,CAAC,QAAQ,aAAb,CAA4B,CAC1B,KAAM,IAAI,MAAJ,CAAU,sDAAV,CACP,CACD,GAAI,CAAC,QAAQ,OAAb,CAAsB,CACpB,KAAM,IAAI,MAAJ,CAAU,gDAAV,CACP,CAED;AACA,GAAI,CAAC,QAAQ,YAAb,CAA2B,CACzB,QAAQ,YAAR,CAAuB,QAAQ,aAAR,CAAwB,UAChD,CAED;AACA,KAAM,aAAc,GAAI,YAAJ,CAAgB,QAAQ,OAAxB,CAAiC,QAAQ,aAAzC,CAAwD,QAAQ,YAAhE,CAApB,CACA,KAAM,UAAW,GAAI,mBAAJ,CAAuB,QAAQ,OAA/B,CAAjB,CACA,KAAM,SAAU,mBAAmB,QAAQ,OAA3B,CAAoC,QAAQ,aAA5C,CAA2D,QAAQ,YAAnE,CAAiF,QAAQ,OAAzF,CAAkG,QAAQ,KAA1G,CAAiH,WAAjH,CAAhB,CAEA;AACA,YACG,UADH,GAEG,IAFH,CAEQ,IAAM,SAAS,KAAT,EAFd,EAIA;AACA,MAAO,QACR,CA7BD","file":"index.js","sourcesContent":["const Initializer = require('./initializer')\nconst ReadyQueueConsumer = require('./ready_queue_consumer')\nconst amqpHandlerWrapper = require('./amqp_handler_wrapper')\n\nmodule.exports = (options) => {\n  // validate options\n  if (!options.channel) {\n    throw new Error('\\'channel\\' not specified.  See documentation.')\n  }\n  if (!options.consumerQueue) {\n    throw new Error('\\'consumerQueue\\' not specified.  See documentation.')\n  }\n  if (!options.handler) {\n    throw new Error('\\'handler\\' not specified.  See documentation.')\n  }\n\n  // set defaults\n  if (!options.failureQueue) {\n    options.failureQueue = options.consumerQueue + '.failure'\n  }\n\n  // initializing the objects\n  const initializer = new Initializer(options.channel, options.consumerQueue, options.failureQueue)\n  const consumer = new ReadyQueueConsumer(options.channel)\n  const wrapper = amqpHandlerWrapper(options.channel, options.consumerQueue, options.failureQueue, options.handler, options.delay, initializer)\n\n  // initializing the queues, exchange and binding. Then starting the consumer\n  initializer\n    .initialize()\n    .then(() => consumer.start())\n\n  // returning wrapper for given amqp handler function.\n  return wrapper\n}\n"]}